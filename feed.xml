<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://dazuozcy.github.io/</id><title>zuo</title><subtitle>A minimal, portfolio, sidebar, bootstrap Jekyll theme with responsive web design and focuses on text presentation.</subtitle> <updated>2023-04-23T08:26:03+08:00</updated> <author> <name>zuo</name> <uri>https://dazuozcy.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://dazuozcy.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en-US" href="https://dazuozcy.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator> <rights> © 2023 zuo </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>SIMD</title><link href="https://dazuozcy.github.io/posts/simd/" rel="alternate" type="text/html" title="SIMD" /><published>2022-07-03T20:19:00+08:00</published> <updated>2023-04-23T08:25:01+08:00</updated> <id>https://dazuozcy.github.io/posts/simd/</id> <content src="https://dazuozcy.github.io/posts/simd/" /> <author> <name>dazuo</name> </author> <category term="SIMD" /> <summary> 可以并行化执行是因为CPU在设计时，增加了一些专用的向量寄存器，这些寄存器的长度往往大于通用寄存器，比如SEE的XMM寄存器，位宽为128位；AVX和AVX2的YMM寄存器，位宽为256位；AVX512的ZMM寄存器，位宽为512位。这些专用的向量寄存器可以同时放入多个数据。 变量定义 第一部分，统一为__m； 第二部分为位数如64、128、256等； 第三部位为变量类型，i表示int型，d表示double型，float型什么也不加。 例如__m128i 表示定义128位的int型数据。__m256 表示定义256位的float型数据。 \[\underbrace{\_\_m}_{\text{前缀}}\underbrace{128}_{\text{位数}}\underbrace{\text{i}}_{\text{变量类型}}\] 函数定义 第一部分：输出的数据类型的位... </summary> </entry> <entry><title>AES-GCM加解密</title><link href="https://dazuozcy.github.io/posts/aes-gcm/" rel="alternate" type="text/html" title="AES-GCM加解密" /><published>2022-05-25T20:19:00+08:00</published> <updated>2022-05-25T20:19:00+08:00</updated> <id>https://dazuozcy.github.io/posts/aes-gcm/</id> <content src="https://dazuozcy.github.io/posts/aes-gcm/" /> <author> <name>dazuo</name> </author> <category term="openssl" /> <summary> 什么是AES加密 常见加密分为两类： 对称加密 AES(Advanced Encrtption Standard)是对称加密的一种，即加密和解密使用相同的密钥。 非对称加密 加密和解密使用不同的密钥，非对程算法比对称算法更复杂，运算速度更慢。 AES加密流程关键概念 分组密码体制 分组密码体制是指将明文分成一段一段的来加密，然后再把一段段密文拼起来成为最终的密文。 AES加密会首先把明文分成若干段，每段数据长度必须是16字节，如果最后一段不够16字节，则padding成16字节。 Padding Padding就是把不满16字节的分组数据填满16个字节，有三种模式： PKCS5 分组数据缺少x个字节，则在数据末尾填充x字节的x。比如缺少3个字节，则末尾填充3个字节的3。 ... </summary> </entry> <entry><title>oneDNN</title><link href="https://dazuozcy.github.io/posts/onednn/" rel="alternate" type="text/html" title="oneDNN" /><published>2022-05-25T20:19:00+08:00</published> <updated>2022-10-28T22:40:10+08:00</updated> <id>https://dazuozcy.github.io/posts/onednn/</id> <content src="https://dazuozcy.github.io/posts/onednn/" /> <author> <name>dazuo</name> </author> <category term="oneDNN" /> <summary> 介绍 oneDNN(前身为mkl-dnn和dnnl)，是intel开发的开源深度学习加速计算库，实现了部分常用神经网络算子，它是oneAPI的一部分。 开发oneDNN库的目的是为了提高intel处理器和显卡上开发深度学习应用的性能，因此该库主要针对intel的CPU和GPU进行优化，对AArch64和NVIDIA GPU实验性支持。目前使用了oneDNN的应用有TensorFlow、Pytorch、Matlab、Mindspore等。 oneDNN核心模块： Primitives. 封装了算子执行时需要的所有信息。加上attributes，primitives可以表示更复杂的融合算子。 Engines. 是计算设备的抽象，主要为GPU设计，对CPU来说是个空壳。 Streams. 封装了一系列执行命令，和eigines绑定，对CPU来说也是个空壳。因为CP... </summary> </entry> <entry><title>C++ vs C</title><link href="https://dazuozcy.github.io/posts/diff-between-c-cpp/" rel="alternate" type="text/html" title="C++ vs C" /><published>2020-07-04T20:19:00+08:00</published> <updated>2023-04-10T22:58:37+08:00</updated> <id>https://dazuozcy.github.io/posts/diff-between-c-cpp/</id> <content src="https://dazuozcy.github.io/posts/diff-between-c-cpp/" /> <author> <name>dazuo</name> </author> <category term="C++" /> <summary> C++之父Bjarne Stroustrup设计C++是为了回答这样的问题：如何直接而高效地操作硬件（如内存管理，进程调度，设备驱动），同时又支持高效的高层次抽象（抽象在代码中体现为函数、类、模板、概念和别名）？ C++在1980年代仅仅是一个基于C和Simula语言功能的组合，在当时的计算机上作为系统编程的相对简单的解决方案，经过多年的发展，已经成长为一个远比当年更复杂和有效的工具，应用极其广泛。 C++一直关注的两个问题 语言结构到硬件设备的直接映射 零开销抽象 What you don’t use, you don’t pay for .（你不用的东西，你就不需要付出代价） What you do use, you couldn’t hand-code any better.（你使用的东西，你手工写代码也不会更好） ... </summary> </entry> <entry><title>Profiling</title><link href="https://dazuozcy.github.io/posts/gperf/" rel="alternate" type="text/html" title="Profiling" /><published>2020-07-03T20:19:00+08:00</published> <updated>2022-07-29T20:59:28+08:00</updated> <id>https://dazuozcy.github.io/posts/gperf/</id> <content src="https://dazuozcy.github.io/posts/gperf/" /> <author> <name>dazuo</name> </author> <category term="profiling" /> <summary> Intel自顶向下的微架构分析方法 Python 和 C/C++ 拓展程序如何性能优化？看这一篇文就够 LD_PRELOAD=/path/to/libprofiler.so.0 CPUPROFILE=output.prof ./program (args) pprof --pdf output.prof &amp;gt; output.pdf py-spy record -o output_debug.svg --native -- python test.py py-spy record --format speedscore -o output_debug.json --native -- python test.py </summary> </entry> </feed>
